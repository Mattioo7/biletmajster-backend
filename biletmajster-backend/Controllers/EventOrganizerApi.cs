/*
 * System rezerwacji miejsc na eventy
 *
 * Niniejsza dokumentacja stanowi opis REST API implemtowanego przez serwer centralny. Endpointy 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: XXX@pw.edu.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Security.Claims;
using AutoMapper;
using biletmajster_backend.Interfaces;
using biletmajster_backend.Attributes;
using biletmajster_backend.Database.Entities;
using biletmajster_backend.Database.Repositories.Interfaces;
using biletmajster_backend.Domain.DTOS;
using biletmajster_backend.Domain.Errors;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;

namespace biletmajster_backend.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EventOrganizerApiController : ControllerBase
    {
        private readonly ILogger<EventOrganizerApiController> _logger;
        private readonly IOrganizersRepository _organizersRepository;
        private readonly IConfirmationService _confirmationService;
        private readonly IMapper _mapper;
        private readonly IOrganizerIdentityManager _organizerIdentityManager;

        public EventOrganizerApiController(ILogger<EventOrganizerApiController> logger,
            IOrganizersRepository organizersRepository, IConfirmationService confirmationService, IMapper mapper,
            IOrganizerIdentityManager organizerIdentityManager)
        {
            _logger = logger;
            _organizersRepository = organizersRepository;
            _confirmationService = confirmationService;
            _mapper = mapper;
            _organizerIdentityManager = organizerIdentityManager;
        }

        /// <summary>
        /// Confirm orginizer account
        /// </summary>
        /// <param name="id">id of Organizer</param>
        /// <param name="code">code from email</param>
        /// <response code="201">account confirmed</response>
        /// <response code="400">code wrong</response>
        [HttpPost]
        [Route("/api/v3/organizer/{id}")]
        [ValidateModelState]
        [SwaggerOperation("Confirm")]
        [SwaggerResponse(statusCode: 201, type: typeof(OrganizerDTO), description: "account confirmed")]
        public virtual async Task<IActionResult> Confirm([FromRoute] [Required] long id,
            [FromQuery] [Required] string code)
        {
            _logger.LogDebug($"Confirmation request from organizer with id: {id}, code: {code}");

            var organizer = await _organizersRepository.GetOrganizerByIdAsync(id);
            if (organizer == null)
            {
                _logger.LogDebug($"Cannot find organizer with id: {id}");
                return NotFound(new ErrorResponse { Message = "Organizer not found" });
            }

            if (organizer.Status != OrganizerAccountStatus.PendingForConfirmation)
            {
                _logger.LogDebug($"Invalid status of organizer with id: {id}, status: {organizer.Status.ToString()}");
                return BadRequest(new ErrorResponse { Message = "Organizer account is not pending for confirmation" });
            }

            var expectedCode = await _confirmationService.GetConfirmationCodeAsync(organizer);

            if (expectedCode != code)
            {
                _logger.LogDebug($"Invalid confirmation code for organizer with id: {id}");
                return BadRequest(new ErrorResponse { Message = "Confirmation code is wrong" });
            }

            await _organizersRepository.UpdateOrganizerAccountStatusAsync(organizer, OrganizerAccountStatus.Confirmed);

            return Ok(_mapper.Map<OrganizerDTO>(organizer));
        }

        /// <summary>
        /// Confirm orginizer account
        /// </summary>
        /// <param name="id">id of Organizer</param>
        /// <response code="204">deleted</response>
        /// <response code="404">id not found</response>
        [HttpDelete]
        [Route("/api/v3/organizer/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("DeleteOrganizer")]
        public virtual async Task<IActionResult> DeleteOrganizer([FromRoute] [Required] long id)
        {
            _logger.LogDebug($"Delete organizer request with id: {id}");

            var email = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (email == null)
            {
                return BadRequest(new ErrorResponse { Message = "Invalid session" });
            }

            // check if organizer wants to delete himself
            var originOrganizer = await _organizersRepository.GetOrganizerByEmailAsync(email);
            if (originOrganizer == null)
            {
                return NotFound(new ErrorResponse { Message = "Organizer not found" });
            }

            if (originOrganizer.Id != id)
            {
                return BadRequest(new ErrorResponse { Message = "You cannot delete other organizer" });
            }

            await _organizersRepository.DeleteOrganizerByIdAsync(id);
            return Ok();
        }

        /// <summary>
        /// Get organizer account (my account)
        /// </summary>
        /// <response code="200">successful operation</response>
        /// <response code="400">invalid session</response>
        [HttpGet]
        [Route("/api/v3/organizer")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetOrganizer")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrganizerDTO), description: "successful operation")]
        public virtual async Task<IActionResult> GetOrganizer()
        {
            var email = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (email == null)
            {
                return BadRequest(new ErrorResponse { Message = "Invalid session" });
            }

            _logger.LogDebug($"Get organizer request with email: {email}");

            var organizer = await _organizersRepository.GetOrganizerByEmailAsync(email);

            return Ok(_mapper.Map<OrganizerDTO>(organizer));
        }

        /// <summary>
        /// Logs organizer into the system
        /// </summary>
        /// <param name="email">The organizer email for login</param>
        /// <param name="password">the password</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid email/password supplied</response>
        [HttpGet]
        [Route("/api/v3/organizer/login")]
        [ValidateModelState]
        [SwaggerOperation("LoginOrganizer")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "successful operation")]
        public virtual async Task<IActionResult> LoginOrganizer([FromQuery] [Required] string email,
            [FromQuery] [Required] string password)
        {
            _logger.LogDebug($"Login organizer request with email: {email}");

            try
            {
                var token = await _organizerIdentityManager.LoginAsync(email, password);

                return Ok(new InlineResponse200 { SessionToken = token });
            }
            catch (Exception e)
            {
                _logger.LogDebug($"Cannot login organizer with email: {email}, error: {e.Message}");
                return BadRequest(new ErrorResponse { Message = e.Message });
            }
        }

        /// <summary>
        /// Patch orginizer account
        /// </summary>
        /// <param name="id">id of Organizer</param>
        /// <param name="body">Update an existent user in the store</param>
        /// <response code="202">patched</response>
        /// <response code="404">id not found</response>
        [HttpPatch]
        [Route("/api/v3/organizer/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("PatchOrganizer")]
        public virtual async Task<IActionResult> PatchOrganizer([FromRoute] [Required] long id, [FromBody] OrganizerDTO body)
        {
            _logger.LogDebug($"Patch organizer request with id: {id}");
            
            var email = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (email == null)
            {
                return BadRequest(new ErrorResponse { Message = "Invalid session" });
            }

            var originOrganizer = await _organizersRepository.GetOrganizerByEmailAsync(email);
            
            if (originOrganizer == null)
            {
                return BadRequest(new ErrorResponse { Message = "Invalid session" });
            }
            
            if (originOrganizer.Id != id)
            {
                return BadRequest(new ErrorResponse { Message = "You cannot patch other organizer" });
            }

            await _organizerIdentityManager.PatchOrganizerAsync(body);

            return Ok();
        }

        /// <summary>
        /// Create orginizer account
        /// </summary>
        /// <param name="name">name of Organizer</param>
        /// <param name="email">email of Organizer</param>
        /// <param name="password">password of Organizer</param>
        /// <response code="201">successful operation</response>
        /// <response code="400">organizer already exist</response>
        [HttpPost]
        [Route("/api/v3/organizer")]
        [ValidateModelState]
        [SwaggerOperation("SignUp")]
        [SwaggerResponse(statusCode: 201, type: typeof(OrganizerDTO), description: "successful operation")]
        public virtual async Task<IActionResult> SignUp([FromQuery] [Required] string name,
            [FromQuery] [Required] string email, [FromQuery] [Required] string password)
        {
            _logger.LogDebug($"SignUp request with email: {email}, name: {name}");

            // check if organizer already exist
            var organizer = await _organizersRepository.GetOrganizerByEmailAsync(email);

            if (organizer != null)
            {
                _logger.LogDebug($"Organizer with email: {email} already exist");
                return BadRequest(new ErrorResponse
                {
                    Message = "Organizer already exist"
                });
            }

            // register organizer
            var newOrganizer = await _organizerIdentityManager.RegisterOrganizerAsync(name, email, password);

            // send email with confirmation code
            await _confirmationService.SendConfirmationRequestAsync(newOrganizer);

            // return organizer 
            return Ok(new OrganizerDTO
            {
                Id = newOrganizer.Id,
                Name = name,
                Email = email,
                Password = password,
                Events = new List<ModelEventDTO>(),
                Status = OrganizerDTO.StatusEnum.Pending
            });
        }
    }
}