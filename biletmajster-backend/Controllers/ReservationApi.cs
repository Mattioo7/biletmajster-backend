/*
 * System rezerwacji miejsc na eventy
 *
 * Niniejsza dokumentacja stanowi opis REST API implemtowanego przez serwer centralny. Endpointy 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: XXX@pw.edu.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using AutoMapper;
using biletmajster_backend.Attributes;
using biletmajster_backend.Contracts;
using biletmajster_backend.Database.Interfaces;
using biletmajster_backend.Interfaces;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;

namespace biletmajster_backend.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ReservationApiController : ControllerBase
    { 
        private readonly IModelEventRepository _eventsRepository;
        private readonly IReservationService _reservationService;
        private readonly IMapper _mapper;
        private readonly ILogger<ReservationApiController> _logger;
        
        public ReservationApiController(IModelEventRepository eventsRepository, IReservationService reservationService, IMapper mapper, ILogger<ReservationApiController> logger)
        {
            _eventsRepository = eventsRepository;
            _reservationService = reservationService;
            _mapper = mapper;
            _logger = logger;
        }

        /// <summary>
        /// Create new reservation
        /// </summary>
        /// <param name="reservationToken">token of reservation</param>
        /// <response code="204">deleted</response>
        /// <response code="404">token not found</response>
        [HttpDelete]
        [Route("/reservation")]
        [ValidateModelState]
        [SwaggerOperation("DeleteReservation")]
        public virtual async Task<IActionResult> DeleteReservation([FromHeader][Required]string reservationToken)
        { 
            try
            {
                _reservationService.DeleteReservationAsync(reservationToken);
                return NoContent();
            }
            catch (Exception exception)
            {
                return NotFound(new ErrorResponse { Message = exception.Message });
            }
        }

        /// <summary>
        /// Create new reservation
        /// </summary>
        /// <param name="eventId">ID of event</param>
        /// <param name="placeID">ID of place</param>
        /// <response code="201">created</response>
        /// <response code="400">no free place or place taken</response>
        /// <response code="404">event not exist or done</response>
        [HttpPost]
        [Route("/reservation")]
        [ValidateModelState]
        [SwaggerOperation("MakeReservation")]
        [SwaggerResponse(statusCode: 201, type: typeof(ReservationDTO), description: "created")]
        public virtual async Task<IActionResult> MakeReservation([FromHeader][Required]long? eventId, [FromHeader]long? placeID)
        { 
            var e = await _eventsRepository.GetEventByIdAsync(eventId.Value);

            if (e == null)
            {
                return NotFound(new ErrorResponse {Message = "Event does not exist"});
            }

            if (e.FreePlace == 0)
            {
                return BadRequest(new ErrorResponse { Message = "No free places" });
            }

            try
            {
                var reservation = await _reservationService.MakeReservationAsync(e, placeID);

                return Ok(_mapper.Map<ReservationDTO>(reservation));
            }
            catch (Exception exception)
            {
                return BadRequest(new ErrorResponse { Message = exception.Message });
            }
        }
    }
}
